# Generated by Django 3.2.4 on 2021-07-03 10:43

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_no', models.EmailField(max_length=254)),
                ('client_id', models.TextField(default='NA')),
                ('client_secret', models.TextField(default='NA')),
                ('installation_url', models.TextField(default='NA')),
                ('refresh_token', models.TextField(default='NA')),
                ('count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('mobile', models.TextField()),
                ('mail', models.EmailField(max_length=254)),
                ('zoom_user_id', models.TextField(default='NA')),
                ('subjects', models.ManyToManyField(to='api.Subject')),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('duration', models.IntegerField()),
                ('Sunday', models.BooleanField(default=False)),
                ('Sunday_time', models.TimeField(blank=True, null=True)),
                ('Monday', models.BooleanField(default=False)),
                ('Monday_time', models.TimeField(blank=True, null=True)),
                ('Tuesday', models.BooleanField(default=False)),
                ('Tuesday_time', models.TimeField(blank=True, null=True)),
                ('Wednesday', models.BooleanField(default=False)),
                ('Wednesday_time', models.TimeField(blank=True, null=True)),
                ('Thursday', models.BooleanField(default=False)),
                ('Thursday_time', models.TimeField(blank=True, null=True)),
                ('Friday', models.BooleanField(default=False)),
                ('Friday_time', models.TimeField(blank=True, null=True)),
                ('Saturday', models.BooleanField(default=False)),
                ('Saturday_time', models.TimeField(blank=True, null=True)),
                ('start_url', models.TextField(default='NA')),
                ('join_url', models.TextField(default='NA')),
                ('zoom_meeting_id', models.TextField(default='NA')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('public_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user_type', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_no', models.CharField(blank=True, max_length=100, null=True)),
                ('country_code', models.CharField(blank=True, max_length=10, null=True)),
                ('head_line', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('experience', models.TextField(blank=True, null=True)),
                ('academics', models.TextField(blank=True, null=True)),
                ('teaching_interests', models.TextField(blank=True, null=True)),
                ('facebook_id', models.CharField(blank=True, max_length=100, null=True)),
                ('gmail_id', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='profile_pic/')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('facebook_pic', models.TextField(blank=True, null=True)),
                ('gmail_pic', models.TextField(blank=True, null=True)),
                ('input_text', models.TextField(blank=True, null=True)),
                ('resume', models.FileField(blank=True, null=True, upload_to='resumes')),
                ('teacher_intro', models.FileField(blank=True, null=True, upload_to='intro_videos')),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=100, null=True)),
                ('hobbies', models.TextField(blank=True, null=True)),
                ('facebook_link', models.TextField(blank=True, null=True)),
                ('instagram_link', models.TextField(blank=True, null=True)),
                ('youtube_link', models.TextField(blank=True, null=True)),
                ('linkedin_link', models.TextField(blank=True, null=True)),
                ('status', models.BooleanField(default=False)),
                ('accepted_by_admin', models.BooleanField(default=False)),
                ('video_url', models.TextField(blank=True, null=True)),
                ('profile_pic_url', models.TextField(blank=True, null=True)),
                ('application_status', models.BooleanField(default=False)),
                ('number_verify_status', models.BooleanField(default=False)),
                ('rejected_by_admin', models.BooleanField(default=False)),
                ('batch', models.ManyToManyField(blank=True, to='api.Batch')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
